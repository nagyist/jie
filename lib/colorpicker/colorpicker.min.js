var cp = {
  filesPath: 'lib/colorpicker/images/'
};
cp.Color = function(a) {
  var b = {
    r: 0,
    g: 0,
    b: 0,
    h: 0,
    s: 0,
    v: 0,
    hex: "",
    setRgb: function(a, b, c) {
      this.r = a,
      this.g = b,
      this.b = c;
      var d = cp.ColorMethods.rgbToHsv(this);
      this.h = d.h,
      this.s = d.s,
      this.v = d.v,
      this.hex = cp.ColorMethods.rgbToHex(this)
    },
    setHsv: function(a, b, c) {
      this.h = a,
      this.s = b,
      this.v = c;
      var d = cp.ColorMethods.hsvToRgb(this);
      this.r = d.r,
      this.g = d.g,
      this.b = d.b,
      this.hex = cp.ColorMethods.rgbToHex(d)
    },
    setHex: function(a) {
      this.hex = a;
      var b = cp.ColorMethods.hexToRgb(this.hex);
      this.r = b.r,
      this.g = b.g,
      this.b = b.b;
      var c = cp.ColorMethods.rgbToHsv(b);
      this.h = c.h,
      this.s = c.s,
      this.v = c.v
    }
  };
  return a && (a.hex ? b.setHex(a.hex) : a.r ? b.setRgb(a.r, a.g, a.b) : a.h && b.setHsv(a.h, a.s, a.v)),
  b
}
,
cp.ColorMethods = {
  hexToRgb: function(a) {
    a = this.validateHex(a);
    var b = "00"
      , c = "00"
      , d = "00";
    return 6 == a.length ? (b = a.substring(0, 2),
    c = a.substring(2, 4),
    d = a.substring(4, 6)) : (a.length > 4 && (b = a.substring(4, a.length),
    a = a.substring(0, 4)),
    a.length > 2 && (c = a.substring(2, a.length),
    a = a.substring(0, 2)),
    a.length > 0 && (d = a.substring(0, a.length))),
    {
      r: this.hexToInt(b),
      g: this.hexToInt(c),
      b: this.hexToInt(d)
    }
  },
  validateHex: function(a) {
    return a = new String(a).toUpperCase(),
    a = a.replace(/[^A-F0-9]/g, "0"),
    a.length > 6 && (a = a.substring(0, 6)),
    a
  },
  webSafeDec: function(a) {
    return a = Math.round(a / 51),
    a *= 51
  },
  hexToWebSafe: function(a) {
    var b, c, d;
    return 3 == a.length ? (b = a.substring(0, 1),
    c = a.substring(1, 1),
    d = a.substring(2, 1)) : (b = a.substring(0, 2),
    c = a.substring(2, 4),
    d = a.substring(4, 6)),
    intToHex(this.webSafeDec(this.hexToInt(b))) + this.intToHex(this.webSafeDec(this.hexToInt(c))) + this.intToHex(this.webSafeDec(this.hexToInt(d)))
  },
  rgbToWebSafe: function(a) {
    return {
      r: this.webSafeDec(a.r),
      g: this.webSafeDec(a.g),
      b: this.webSafeDec(a.b)
    }
  },
  rgbToHex: function(a) {
    return this.intToHex(a.r) + this.intToHex(a.g) + this.intToHex(a.b)
  },
  intToHex: function(a) {
    var b = parseInt(a).toString(16);
    return 1 == b.length && (b = "0" + b),
    b.toUpperCase()
  },
  hexToInt: function(a) {
    return parseInt(a, 16)
  },
  rgbToHsv: function(a) {
    var b = a.r / 255
      , c = a.g / 255
      , d = a.b / 255;
    hsv = {
      h: 0,
      s: 0,
      v: 0
    };
    var e = 0
      , f = 0;
    return b >= c && b >= d ? (f = b,
    e = c > d ? d : c) : c >= d && c >= b ? (f = c,
    e = b > d ? d : b) : (f = d,
    e = c > b ? b : c),
    hsv.v = f,
    hsv.s = f ? (f - e) / f : 0,
    hsv.s ? (delta = f - e,
    b == f ? hsv.h = (c - d) / delta : c == f ? hsv.h = 2 + (d - b) / delta : hsv.h = 4 + (b - c) / delta,
    hsv.h = parseInt(60 * hsv.h),
    hsv.h < 0 && (hsv.h += 360)) : hsv.h = 0,
    hsv.s = parseInt(100 * hsv.s),
    hsv.v = parseInt(100 * hsv.v),
    hsv
  },
  hsvToRgb: function(a) {
    rgb = {
      r: 0,
      g: 0,
      b: 0
    };
    var b = a.h
      , c = a.s
      , d = a.v;
    if (0 == c)
      0 == d ? rgb.r = rgb.g = rgb.b = 0 : rgb.r = rgb.g = rgb.b = parseInt(255 * d / 100);
    else {
      360 == b && (b = 0),
      b /= 60,
      c /= 100,
      d /= 100;
      var e = parseInt(b)
        , f = b - e
        , g = d * (1 - c)
        , h = d * (1 - c * f)
        , i = d * (1 - c * (1 - f));
      switch (e) {
      case 0:
        rgb.r = d,
        rgb.g = i,
        rgb.b = g;
        break;
      case 1:
        rgb.r = h,
        rgb.g = d,
        rgb.b = g;
        break;
      case 2:
        rgb.r = g,
        rgb.g = d,
        rgb.b = i;
        break;
      case 3:
        rgb.r = g,
        rgb.g = h,
        rgb.b = d;
        break;
      case 4:
        rgb.r = i,
        rgb.g = g,
        rgb.b = d;
        break;
      case 5:
        rgb.r = d,
        rgb.g = g,
        rgb.b = h
      }
      rgb.r = parseInt(255 * rgb.r),
      rgb.g = parseInt(255 * rgb.g),
      rgb.b = parseInt(255 * rgb.b)
    }
    return rgb
  }
};
cp.ColorValuePicker = function(a) {
  this.id = a,
  this.onValuesChanged = null,
  this._hueInput = document.getElementById(this.id + "_Hue"),
  this._valueInput = document.getElementById(this.id + "_Brightness"),
  this._saturationInput = document.getElementById(this.id + "_Saturation"),
  this._redInput = document.getElementById(this.id + "_Red"),
  this._greenInput = document.getElementById(this.id + "_Green"),
  this._blueInput = document.getElementById(this.id + "_Blue"),
  this._hexInput = document.getElementById(this.id + "_Hex"),
  this._event_onHsvKeyUp = this._onHsvKeyUp.bind(this),
  this._event_onHsvBlur = this._onHsvBlur.bind(this),
  this._event_onRgbKeyUp = this._onRgbKeyUp.bind(this),
  this._event_onRgbBlur = this._onRgbBlur.bind(this),
  this._event_onHexKeyUp = this._onHexKeyUp.bind(this),
  this._hueInput.addEventListener("keyup", this._event_onHsvKeyUp),
  this._valueInput.addEventListener("keyup", this._event_onHsvKeyUp),
  this._saturationInput.addEventListener("keyup", this._event_onHsvKeyUp),
  this._hueInput.addEventListener("blur", this._event_onHsvBlur),
  this._valueInput.addEventListener("blur", this._event_onHsvBlur),
  this._saturationInput.addEventListener("blur", this._event_onHsvBlur),
  this._redInput.addEventListener("keyup", this._event_onRgbKeyUp),
  this._greenInput.addEventListener("keyup", this._event_onRgbKeyUp),
  this._blueInput.addEventListener("keyup", this._event_onRgbKeyUp),
  this._redInput.addEventListener("blur", this._event_onRgbBlur),
  this._greenInput.addEventListener("blur", this._event_onRgbBlur),
  this._blueInput.addEventListener("blur", this._event_onRgbBlur),
  this._hexInput.addEventListener("keyup", this._event_onHexKeyUp),
  this.color = new cp.Color,
  "" != this._hexInput.value && this.color.setHex(this._hexInput.value),
  this._hexInput.value = this.color.hex,
  this._redInput.value = this.color.r,
  this._greenInput.value = this.color.g,
  this._blueInput.value = this.color.b,
  this._hueInput.value = this.color.h,
  this._saturationInput.value = this.color.s,
  this._valueInput.value = this.color.v
}
,
cp.ColorValuePicker.prototype = {
  _onHsvKeyUp: function(a) {
    "" != a.target.value && (this.validateHsv(a),
    this.setValuesFromHsv(),
    this.onValuesChanged && this.onValuesChanged(this))
  },
  _onRgbKeyUp: function(a) {
    "" != a.target.value && (this.validateRgb(a),
    this.setValuesFromRgb(),
    this.onValuesChanged && this.onValuesChanged(this))
  },
  _onHexKeyUp: function(a) {
    "" != a.target.value && (this.validateHex(a),
    this.setValuesFromHex(),
    this.onValuesChanged && this.onValuesChanged(this))
  },
  _onHsvBlur: function(a) {
    "" == a.target.value && this.setValuesFromRgb()
  },
  _onRgbBlur: function(a) {
    "" == a.target.value && this.setValuesFromHsv()
  },
  HexBlur: function(a) {
    "" == a.target.value && this.setValuesFromHsv()
  },
  validateRgb: function(a) {
    return this._keyNeedsValidation(a) ? (this._redInput.value = this._setValueInRange(this._redInput.value, 0, 255),
    this._greenInput.value = this._setValueInRange(this._greenInput.value, 0, 255),
    void (this._blueInput.value = this._setValueInRange(this._blueInput.value, 0, 255))) : a
  },
  validateHsv: function(a) {
    return this._keyNeedsValidation(a) ? (this._hueInput.value = this._setValueInRange(this._hueInput.value, 0, 359),
    this._saturationInput.value = this._setValueInRange(this._saturationInput.value, 0, 100),
    void (this._valueInput.value = this._setValueInRange(this._valueInput.value, 0, 100))) : a
  },
  validateHex: function(a) {
    if (!this._keyNeedsValidation(a))
      return a;
    var b = new String(this._hexInput.value).toUpperCase();
    b = b.replace(/[^A-F0-9]/g, "0"),
    b.length > 6 && (b = b.substring(0, 6)),
    this._hexInput.value = b
  },
  _keyNeedsValidation: function(a) {
    return 9 != a.keyCode && 16 != a.keyCode && 38 != a.keyCode && 29 != a.keyCode && 40 != a.keyCode && 37 != a.keyCode && (!a.ctrlKey || a.keyCode != "c".charCodeAt() && a.keyCode != "v".charCodeAt())
  },
  _setValueInRange: function(a, b, c) {
    return "" == a || isNaN(a) ? b : (a = parseInt(a),
    a > c ? c : a < b ? b : a)
  },
  setValuesFromRgb: function() {
    this.color.setRgb(this._redInput.value, this._greenInput.value, this._blueInput.value),
    this._hexInput.value = this.color.hex,
    this._hueInput.value = this.color.h,
    this._saturationInput.value = this.color.s,
    this._valueInput.value = this.color.v
  },
  setValuesFromHsv: function() {
    this.color.setHsv(this._hueInput.value, this._saturationInput.value, this._valueInput.value),
    this._hexInput.value = this.color.hex,
    this._redInput.value = this.color.r,
    this._greenInput.value = this.color.g,
    this._blueInput.value = this.color.b
  },
  setValuesFromHex: function() {
    this.color.setHex(this._hexInput.value),
    this._redInput.value = this.color.r,
    this._greenInput.value = this.color.g,
    this._blueInput.value = this.color.b,
    this._hueInput.value = this.color.h,
    this._saturationInput.value = this.color.s,
    this._valueInput.value = this.color.v
  }
};
cp.SlidersList = [],
cp.DefaultSliderSettings = {
  xMinValue: 0,
  xMaxValue: 100,
  yMinValue: 0,
  yMaxValue: 100,
  arrowImage: cp.filesPath + "/rangearrows.gif"
},
cp.Slider = function(i, a, b) {
  this.settings = Object.assign(Object.assign({}, cp.DefaultSliderSettings), b || {}),
  this.xValue = 0,
  this.yValue = 0,
  this._bar = a,
  this._arrow = document.createElement("img"),
  this._arrow.border = 0,
  this._arrow.src = this.settings.arrowImage,
  this._arrow.margin = 0,
  this._arrow.padding = 0,
  this._arrow.style.position = "absolute",
  this._arrow.style.top = "0px",
  this._arrow.style.left = "0px",
  //jie
  document.querySelector('.color-picker').appendChild(this._arrow),
  this.setPositioningVariables(),
  this._event_docMouseMove = this._docMouseMove.bind(this),
  this._event_docMouseUp = this._docMouseUp.bind(this),
  this._bar.addEventListener("mousedown", this._bar_mouseDown.bind(this)),
  this._arrow.addEventListener("mousedown", this._arrow_mouseDown.bind(this)),
  this.setArrowPositionFromValues(),
  this.onValuesChanged && this.onValuesChanged(this),
  cp.SlidersList.push(this)
}
,
cp.Slider.prototype = {
  _bar: null,
  _arrow: null,
  setPositioningVariables: function() {
    this._barWidth = this._bar ? this._bar.offsetWidth : 20,
    this._barHeight = this._bar ? this._bar.offsetHeight : 256;
    var el = this._bar;
    var a = {
      top: 0,
      left: 0
    };
    while (el.offsetParent) {
      a.left += el.offsetLeft;
      a.top += el.offsetTop;
      el = el.offsetParent;
    }
    this._barTop = a.top,
    this._barLeft = a.left,
    this._barBottom = this._barTop + this._barHeight,
    this._barRight = this._barLeft + this._barWidth,
    //this._arrow = document.getElementById(this._arrowId),
    this._arrowWidth = this._arrow ? this._arrow.offsetWidth : 15,
    this._arrowHeight = this._arrow ? this._arrow.offsetHeight : 15,
    this.MinX = this._barLeft,
    this.MinY = this._barTop,
    this.MaxX = this._barRight,
    this.MinY = this._barBottom
  },
  setArrowPositionFromValues: function(a) {
    this.setPositioningVariables();
    var b = 0
      , c = 0;
    if (this.settings.xMinValue != this.settings.xMaxValue)
      if (this.xValue == this.settings.xMinValue)
        b = 0;
      else if (this.xValue == this.settings.xMaxValue)
        b = this._barWidth - 1;
      else {
        var d = this.settings.xMaxValue;
        this.settings.xMinValue < 1 && (d = d + Math.abs(this.settings.xMinValue) + 1);
        var e = this.xValue;
        this.xValue < 1 && (e += 1),
        b = e / d * this._barWidth,
        b = parseInt(b) == d - 1 ? d : parseInt(b),
        this.settings.xMinValue < 1 && (b = b - Math.abs(this.settings.xMinValue) - 1)
      }
    if (this.settings.yMinValue != this.settings.yMaxValue)
      if (this.yValue == this.settings.yMinValue)
        c = 0;
      else if (this.yValue == this.settings.yMaxValue)
        c = this._barHeight - 1;
      else {
        var f = this.settings.yMaxValue;
        this.settings.yMinValue < 1 && (f = f + Math.abs(this.settings.yMinValue) + 1);
        var g = this.yValue;
        this.yValue < 1 && (g += 1);
        var c = g / f * this._barHeight;
        c = parseInt(c) == f - 1 ? f : parseInt(c),
        this.settings.yMinValue < 1 && (c = c - Math.abs(this.settings.yMinValue) - 1)
      }
    this._setArrowPosition(b, c)
  },
  _setArrowPosition: function(a, b) {
    a < 0 && (a = 0),
    a > this._barWidth && (a = this._barWidth),
    b < 0 && (b = 0),
    b > this._barHeight && (b = this._barHeight);
    var c = this._bar.offsetLeft /* jie this._barLeft */
    + a
      , d = 19 + this._bar.offsetTop /* jie this._barTop */
    + b;
    c -= this._arrowWidth > this._barWidth ? this._arrowWidth / 2 - this._barWidth / 2 : parseInt(this._arrowWidth / 2),
    d -= this._arrowHeight > this._barHeight ? this._arrowHeight / 2 - this._barHeight / 2 : parseInt(this._arrowHeight / 2),
    this._arrow.style.left = c + "px",
    this._arrow.style.top = d + "px"
  },
  _bar_mouseDown: function(a) {
    this._mouseDown(a)
  },
  _arrow_mouseDown: function(a) {
    this._mouseDown(a)
  },
  _mouseDown: function(a) {
    cp.ActiveSlider = this,
    this.setValuesFromMousePosition(a),
    document.addEventListener("mousemove", this._event_docMouseMove),
    document.addEventListener("mouseup", this._event_docMouseUp),
    a.preventDefault()
  },
  _docMouseMove: function(a) {
    this.setValuesFromMousePosition(a),
    a.preventDefault()
  },
  _docMouseUp: function(a) {
    document.removeEventListener("mouseup", this._event_docMouseUp),
    document.removeEventListener("mousemove", this._event_docMouseMove),
    a.preventDefault()
  },
  setValuesFromMousePosition: function(a) {
    this.setPositioningVariables();
    var b = {
      x: a.clientX,
      y: a.clientY
    }
      , c = 0
      , d = 0;
    c = b.x < this._barLeft ? 0 : b.x > this._barRight ? this._barWidth : b.x - this._barLeft + 1,
    d = b.y < this._barTop ? 0 : b.y > this._barBottom ? this._barHeight : b.y - this._barTop + 1;
    var e = parseInt(c / this._barWidth * this.settings.xMaxValue)
      , f = parseInt(d / this._barHeight * this.settings.yMaxValue); 
    this.xValue = e,
    this.yValue = f,
    this.settings.xMaxValue == this.settings.xMinValue && (c = 0),
    this.settings.yMaxValue == this.settings.yMinValue && (d = 0),
    this._setArrowPosition(c, d),
    this.onValuesChanged && this.onValuesChanged(this)
  }
};
cp.DefaultColorPickerSettings = {
  startMode: "h",
  startHex: "ff0000",
  clientFilesPath: cp.filesPath
},
cp.ColorPicker = function(a, b) {
  this.id = a,
  this.settings = Object.assign(Object.assign({}, cp.DefaultColorPickerSettings), b || {}),
  this._hueRadio = document.getElementById(this.id + "_HueRadio"),
  this._saturationRadio = document.getElementById(this.id + "_SaturationRadio"),
  this._valueRadio = document.getElementById(this.id + "_BrightnessRadio"),
  this._redRadio = document.getElementById(this.id + "_RedRadio"),
  this._greenRadio = document.getElementById(this.id + "_GreenRadio"),
  this._blueRadio = document.getElementById(this.id + "_BlueRadio"),
  this._hueRadio.value = "h",
  this._saturationRadio.value = "s",
  this._valueRadio.value = "v",
  this._redRadio.value = "r",
  this._greenRadio.value = "g",
  this._blueRadio.value = "b";
  this._event_onRadioClicked = this._onRadioClicked.bind(this),
  this._hueRadio.addEventListener("click", this._event_onRadioClicked),
  this._saturationRadio.addEventListener("click", this._event_onRadioClicked),
  this._valueRadio.addEventListener("click", this._event_onRadioClicked),
  this._redRadio.addEventListener("click", this._event_onRadioClicked),
  this._greenRadio.addEventListener("click", this._event_onRadioClicked),
  this._blueRadio.addEventListener("click", this._event_onRadioClicked),
  this._preview = document.getElementById(this.id + "_Preview"),
  this._mapBase = document.getElementById(this.id + "_ColorMap"),
  this._mapBase.style.width = "256px",
  this._mapBase.style.height = "256px",
  this._mapBase.style.padding = 0,
  this._mapBase.style.margin = 0,
  this._mapBase.style.border = "solid 1px #000",
  this._mapL1 = document.createElement("img"),
  this._mapL1.src = this.settings.clientFilesPath + "blank.gif",
  this._mapL1.width = 256,
  this._mapL1.height = 256,
  this._mapL1.style.margin = "0px",
  this._mapBase.appendChild(this._mapL1),
  this._mapL2 = document.createElement("img"),
  this._mapL2.src = this.settings.clientFilesPath + "blank.gif",
  this._mapL2.width = 256,
  this._mapL2.height = 256,
  this._mapBase.appendChild(this._mapL2),
  this._mapL2.style.clear = "both",
  this._mapL2.style.margin = "-256px 0px 0px 0px",
  this._mapL2.style.opacity = 0.5,
  this._bar = document.getElementById(this.id + "_ColorBar"),
  this._bar.style.width = "20px",
  this._bar.style.height = "256px",
  this._bar.style.padding = 0,
  this._bar.style.margin = "0px 10px",
  this._bar.style.border = "solid 1px #000",
  this._barL1 = document.createElement("img"),
  this._barL1.src = this.settings.clientFilesPath + "blank.gif",
  this._barL1.width = 20,
  this._barL1.height = 256,
  this._barL1.style.margin = "0px",
  this._bar.appendChild(this._barL1),
  this._barL2 = document.createElement("img"),
  this._barL2.src = this.settings.clientFilesPath + "blank.gif",
  this._barL2.width = 20,
  this._barL2.height = 256,
  this._barL2.style.margin = "-256px 0px 0px 0px",
  this._bar.appendChild(this._barL2),
  this._barL3 = document.createElement("img"),
  this._barL3.src = this.settings.clientFilesPath + "blank.gif",
  this._barL3.width = 20,
  this._barL3.height = 256,
  this._barL3.style.margin = "-256px 0px 0px 0px",
  this._barL3.style.backgroundColor = "#ff0000",
  this._bar.appendChild(this._barL3),
  this._barL4 = document.createElement("img"),
  this._barL4.src = this.settings.clientFilesPath + "blank.gif",
  this._barL4.width = 20,
  this._barL4.height = 256,
  this._barL4.style.margin = "-256px 0px 0px 0px",
  this._bar.appendChild(this._barL4),
  this._map = new cp.Slider('L2',this._mapL2,{
    xMaxValue: 255,
    yMinValue: 255,
    arrowImage: this.settings.clientFilesPath + "mappoint.gif"
  }),
  this._slider = new cp.Slider('L4',this._barL4,{
    xMinValue: 1,
    xMaxValue: 1,
    yMinValue: 255,
    arrowImage: this.settings.clientFilesPath + "rangearrows.gif"
  }),
  this._cvp = new cp.ColorValuePicker(this.id);
  var c = this;
  this._slider.onValuesChanged = function() {
    c.sliderValueChanged()
  }
  ,
  this._map.onValuesChanged = function() {
    c.mapValueChanged()
  }
  ,
  this._cvp.onValuesChanged = function() {
    c.textValuesChanged()
  }
  ,
  this.isLessThanIE7 = !1;
  var d = parseFloat(navigator.appVersion.split("MSIE")[1]);
  d < 7 && document.body.filters && (this.isLessThanIE7 = !0),
  this.setColorMode(this.settings.startMode),
  this.settings.startHex && (this._cvp._hexInput.value = this.settings.startHex),
  this._cvp.setValuesFromHex(),
  this.positionMapAndSliderArrows(),
  this.updateVisuals(),
  this.color = null
}
,
cp.ColorPicker.prototype = {
  show: function() {
    this._map.Arrow.style.display = "",
    this._slider.Arrow.style.display = "",
    this._map.setPositioningVariables(),
    this._slider.setPositioningVariables(),
    this.positionMapAndSliderArrows()
  },
  hide: function() {
    this._map.Arrow.style.display = "none",
    this._slider.Arrow.style.display = "none"
  },
  _onRadioClicked: function(a) {
    this.setColorMode(a.target.value)
  },
  _onWebSafeClicked: function(a) {
    this.setColorMode(this.ColorMode)
  },
  textValuesChanged: function() {
    this.positionMapAndSliderArrows(),
    this.updateVisuals()
  },
  setColorMode: function(a) {
    function b(a, b) {
      a.setAlpha(b, 100),
      b.style.backgroundColor = "",
      b.src = a.settings.clientFilesPath + "blank.gif",
      b.style.filter = ""
    }
    switch (this.color = this._cvp.color,
    b(this, this._mapL1),
    b(this, this._mapL2),
    b(this, this._barL1),
    b(this, this._barL2),
    b(this, this._barL3),
    b(this, this._barL4),
    this._hueRadio.checked = !1,
    this._saturationRadio.checked = !1,
    this._valueRadio.checked = !1,
    this._redRadio.checked = !1,
    this._greenRadio.checked = !1,
    this._blueRadio.checked = !1,
    a) {
    case "h":
      this._hueRadio.checked = !0,
      this._mapL1.style.backgroundColor = "#" + this.color.hex,
      this._mapL2.style.backgroundColor = "transparent",
      this.setImg(this._mapL2, this.settings.clientFilesPath + "map-hue.png"),
      this.setAlpha(this._mapL2, 100),
      this.setImg(this._barL4, this.settings.clientFilesPath + "bar-hue.png"),
      this._map.settings.xMaxValue = 100,
      this._map.settings.yMaxValue = 100,
      this._slider.settings.yMaxValue = 359;
      break;
    case "s":
      this._saturationRadio.checked = !0,
      this.setImg(this._mapL1, this.settings.clientFilesPath + "map-saturation.png"),
      this.setImg(this._mapL2, this.settings.clientFilesPath + "map-saturation-overlay.png"),
      this.setAlpha(this._mapL2, 0),
      this.setBG(this._barL3, this.color.hex),
      this.setImg(this._barL4, this.settings.clientFilesPath + "bar-saturation.png"),
      this._map.settings.xMaxValue = 359,
      this._map.settings.yMaxValue = 100,
      this._slider.settings.yMaxValue = 100;
      break;
    case "v":
      this._valueRadio.checked = !0,
      this.setBG(this._mapL1, "000"),
      this.setImg(this._mapL2, this.settings.clientFilesPath + "map-brightness.png"),
      this._barL3.style.backgroundColor = "#" + this.color.hex,
      this.setImg(this._barL4, this.settings.clientFilesPath + "bar-brightness.png"),
      this._map.settings.xMaxValue = 359,
      this._map.settings.yMaxValue = 100,
      this._slider.settings.yMaxValue = 100;
      break;
    case "r":
      this._redRadio.checked = !0,
      this.setImg(this._mapL2, this.settings.clientFilesPath + "map-red-max.png"),
      this.setImg(this._mapL1, this.settings.clientFilesPath + "map-red-min.png"),
      this.setImg(this._barL4, this.settings.clientFilesPath + "bar-red-tl.png"),
      this.setImg(this._barL3, this.settings.clientFilesPath + "bar-red-tr.png"),
      this.setImg(this._barL2, this.settings.clientFilesPath + "bar-red-br.png"),
      this.setImg(this._barL1, this.settings.clientFilesPath + "bar-red-bl.png");
      break;
    case "g":
      this._greenRadio.checked = !0,
      this.setImg(this._mapL2, this.settings.clientFilesPath + "map-green-max.png"),
      this.setImg(this._mapL1, this.settings.clientFilesPath + "map-green-min.png"),
      this.setImg(this._barL4, this.settings.clientFilesPath + "bar-green-tl.png"),
      this.setImg(this._barL3, this.settings.clientFilesPath + "bar-green-tr.png"),
      this.setImg(this._barL2, this.settings.clientFilesPath + "bar-green-br.png"),
      this.setImg(this._barL1, this.settings.clientFilesPath + "bar-green-bl.png");
      break;
    case "b":
      this._blueRadio.checked = !0,
      this.setImg(this._mapL2, this.settings.clientFilesPath + "map-blue-max.png"),
      this.setImg(this._mapL1, this.settings.clientFilesPath + "map-blue-min.png"),
      this.setImg(this._barL4, this.settings.clientFilesPath + "bar-blue-tl.png"),
      this.setImg(this._barL3, this.settings.clientFilesPath + "bar-blue-tr.png"),
      this.setImg(this._barL2, this.settings.clientFilesPath + "bar-blue-br.png"),
      this.setImg(this._barL1, this.settings.clientFilesPath + "bar-blue-bl.png");
      break;
    default:
      alert("invalid mode")
    }
    switch (a) {
    case "h":
    case "s":
    case "v":
      this._map.settings.xMinValue = 1,
      this._map.settings.yMinValue = 1,
      this._slider.settings.yMinValue = 1;
      break;
    case "r":
    case "g":
    case "b":
      this._map.settings.xMinValue = 0,
      this._map.settings.yMinValue = 0,
      this._slider.settings.yMinValue = 0,
      this._map.settings.xMaxValue = 255,
      this._map.settings.yMaxValue = 255,
      this._slider.settings.yMaxValue = 255
    }
    this.ColorMode = a,
    this.positionMapAndSliderArrows(),
    this.updateMapVisuals(),
    this.updateSliderVisuals()
  },
  mapValueChanged: function() {
    switch (this.ColorMode) {
    case "h":
      this._cvp._saturationInput.value = this._map.xValue,
      this._cvp._valueInput.value = 100 - this._map.yValue;
      break;
    case "s":
      this._cvp._hueInput.value = this._map.xValue,
      this._cvp._valueInput.value = 100 - this._map.yValue;
      break;
    case "v":
      this._cvp._hueInput.value = this._map.xValue,
      this._cvp._saturationInput.value = 100 - this._map.yValue;
      break;
    case "r":
      this._cvp._blueInput.value = this._map.xValue,
      this._cvp._greenInput.value = 256 - this._map.yValue;
      break;
    case "g":
      this._cvp._blueInput.value = this._map.xValue,
      this._cvp._redInput.value = 256 - this._map.yValue;
      break;
    case "b":
      this._cvp._redInput.value = this._map.xValue,
      this._cvp._greenInput.value = 256 - this._map.yValue
    }
    switch (this.ColorMode) {
    case "h":
    case "s":
    case "v":
      this._cvp.setValuesFromHsv();
      break;
    case "r":
    case "g":
    case "b":
      this._cvp.setValuesFromRgb()
    }
    this.updateVisuals()
  },
  sliderValueChanged: function() {
    switch (this.ColorMode) {
    case "h":
      this._cvp._hueInput.value = 360 - this._slider.yValue;
      break;
    case "s":
      this._cvp._saturationInput.value = 100 - this._slider.yValue;
      break;
    case "v":
      this._cvp._valueInput.value = 100 - this._slider.yValue;
      break;
    case "r":
      this._cvp._redInput.value = 255 - this._slider.yValue;
      break;
    case "g":
      this._cvp._greenInput.value = 255 - this._slider.yValue;
      break;
    case "b":
      this._cvp._blueInput.value = 255 - this._slider.yValue
    }
    switch (this.ColorMode) {
    case "h":
    case "s":
    case "v":
      this._cvp.setValuesFromHsv();
      break;
    case "r":
    case "g":
    case "b":
      this._cvp.setValuesFromRgb()
    }
    this.updateVisuals()
  },
  positionMapAndSliderArrows: function() {
    this.color = this._cvp.color;
    var a = 0;
    switch (this.ColorMode) {
    case "h":
      a = 360 - this.color.h;
      break;
    case "s":
      a = 100 - this.color.s;
      break;
    case "v":
      a = 100 - this.color.v;
      break;
    case "r":
      a = 255 - this.color.r;
      break;
    case "g":
      a = 255 - this.color.g;
      break;
    case "b":
      a = 255 - this.color.b
    }
    this._slider.yValue = a,
    this._slider.setArrowPositionFromValues();
    var b = 0
      , c = 0;
    switch (this.ColorMode) {
    case "h":
      b = this.color.s,
      c = 100 - this.color.v;
      break;
    case "s":
      b = this.color.h,
      c = 100 - this.color.v;
      break;
    case "v":
      b = this.color.h,
      c = 100 - this.color.s;
      break;
    case "r":
      b = this.color.b,
      c = 256 - this.color.g;
      break;
    case "g":
      b = this.color.b,
      c = 256 - this.color.r;
      break;
    case "b":
      b = this.color.r,
      c = 256 - this.color.g
    }
    this._map.xValue = b,
    this._map.yValue = c,
    this._map.setArrowPositionFromValues()
  },
  updateVisuals: function() {
    jie['color-change']();
    this.updatePreview(),
    this.updateMapVisuals(),
    this.updateSliderVisuals()
  },
  updatePreview: function() {
    try {
      this._preview.style.backgroundColor = "#" + this._cvp.color.hex
    } catch (a) {}
  },
  updateMapVisuals: function() {
    switch (this.color = this._cvp.color,
    this.ColorMode) {
    case "h":
      var a = new cp.Color({
        h: this.color.h,
        s: 100,
        v: 100
      });
      this.setBG(this._mapL1, a.hex);
      break;
    case "s":
      this.setAlpha(this._mapL2, 100 - this.color.s);
      break;
    case "v":
      this.setAlpha(this._mapL2, this.color.v);
      break;
    case "r":
      this.setAlpha(this._mapL2, this.color.r / 256 * 100);
      break;
    case "g":
      this.setAlpha(this._mapL2, this.color.g / 256 * 100);
      break;
    case "b":
      this.setAlpha(this._mapL2, this.color.b / 256 * 100)
    }
  },
  updateSliderVisuals: function() {
    switch (this.color = this._cvp.color,
    this.ColorMode) {
    case "h":
      break;
    case "s":
      var a = new cp.Color({
        h: this.color.h,
        s: 100,
        v: this.color.v
      });
      this.setBG(this._barL3, a.hex);
      break;
    case "v":
      var b = new cp.Color({
        h: this.color.h,
        s: this.color.s,
        v: 100
      });
      this.setBG(this._barL3, b.hex);
      break;
    case "r":
    case "g":
    case "b":
      var c = 0
        , d = 0;
      "r" == this.ColorMode ? (c = this._cvp._blueInput.value,
      d = this._cvp._greenInput.value) : "g" == this.ColorMode ? (c = this._cvp._blueInput.value,
      d = this._cvp._redInput.value) : "b" == this.ColorMode && (c = this._cvp._redInput.value,
      d = this._cvp._greenInput.value);
      var e = c / 256 * 100
        , f = d / 256 * 100
        , g = (256 - c) / 256 * 100
        , h = (256 - d) / 256 * 100;
      this.setAlpha(this._barL4, f > g ? g : f),
      this.setAlpha(this._barL3, f > e ? e : f),
      this.setAlpha(this._barL2, h > e ? e : h),
      this.setAlpha(this._barL1, h > g ? g : h)
    }
  },
  setBG: function(a, b) {
    try {
      a.style.backgroundColor = "#" + b
    } catch (a) {}
  },
  setImg: function(a, b) {
    b.indexOf("png") && this.isLessThanIE7 ? (a.pngSrc = b,
    a.src = this.settings.clientFilesPath + "blank.gif",
    a.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + b + "');") : a.src = b
  },
  setAlpha: function(a, b) {
    if (this.isLessThanIE7) {
      var c = a.pngSrc;
      null != c && c.indexOf("map-hue") == -1 && (a.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + c + "') progid:DXImageTransform.Microsoft.Alpha(opacity=" + b + ")")
    } else {
      var d = Math.min((b / 100), 1);
      d = Math.max(d, 0);
      a.style.opacity = d;
    }
  }
};
